(()=>{"use strict";class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.render()}render(){this.shadowRoot.innerHTML="\n      <style>\n        :host {\n          display: block;\n          max-width: 980px;\n          width: 100%;\n          margin: 0 auto;\n          background-color: #ccc;\n        }\n      </style>\n      <control-panel></control-panel>\n      <buffer-zone></buffer-zone>\n      <work-zone></work-zone>\n    "}}function e(){const t=Math.floor(5*Math.random())+3,e=[];let n=[],s=0;for(let e=0;e<t;e++)s+=(.8*Math.random()+.1)*(Math.PI/2),n.push(s);const o=n[n.length-1],i=2*Math.PI/o;n=n.map((t=>t*i));for(let s=0;s<t;s++){let t=40;t*=Math.random()>.8?.2+.3*Math.random():.7+.6*Math.random();const o=50+t*Math.cos(n[s]),i=50+t*Math.sin(n[s]);e.push(`${o.toFixed(2)},${i.toFixed(2)}`)}return e.join(" ")}customElements.define("app-layout",t);class n extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.polygonData=[]}connectedCallback(){this.render(),this.setupEventListeners(),this.restoreFromStorage()}restoreFromStorage(){this.polygonData=function(){const t=localStorage.getItem("polygons");if(!t)return[];try{const e=JSON.parse(t);return Array.isArray(e)?e:[]}catch{return[]}}(),this.renderPolygons(),this.isDirty=!1}renderPolygons(){const t=this.shadowRoot.getElementById("shapes-container");t.innerHTML="";for(const e of this.polygonData){const n=this.createPolygonElement(e.points,e.fill,{width:e.width,height:e.height,viewBox:e.viewBox});t.appendChild(n)}}setupEventListeners(){document.addEventListener("create-polygons",(t=>{this.polygonData=function(t){const n=[];for(let s=0;s<t;s++){const t=e(),s=`hsl(${360*Math.random()}, 70%, 80%)`,o="100",i="100",r="0 0 100 100";n.push({points:t,fill:s,width:o,height:i,viewBox:r})}return n}(t.detail.count),this.renderPolygons(),this.isDirty=!0})),document.addEventListener("save-polygons",(()=>{var t;t=this.polygonData,localStorage.setItem("polygons",JSON.stringify(t)),this.isDirty=!1})),document.addEventListener("reset-polygons",(()=>{localStorage.removeItem("polygons"),this.polygonData=[],this.renderPolygons(),this.isDirty=!1}))}createPolygonElement(t,e,n={}){const s="http://www.w3.org/2000/svg",o=document.createElementNS(s,"svg");o.setAttribute("width",n.width||"100"),o.setAttribute("height",n.height||"100"),o.setAttribute("viewBox",n.viewBox||"0 0 100 100"),o.setAttribute("class","polygon"),o.setAttribute("draggable","true"),o.style.userDrag="element",o.style.webkitUserDrag="element";const i=document.createElementNS(s,"polygon");return i.setAttribute("points",t),i.setAttribute("fill",e),i.setAttribute("stroke","#333"),i.setAttribute("stroke-miterlimit","2"),o.appendChild(i),o.addEventListener("dragstart",(t=>{const e=(new XMLSerializer).serializeToString(o);t.dataTransfer.setData("text/html",e),t.dataTransfer.setData("text/plain",e),t.dataTransfer.setDragImage(o,50,50)})),o}render(){this.shadowRoot.innerHTML='\n      <style>\n        .buffer-zone {\n          margin-bottom: 10px;\n          min-height: 200px;\n          background-color: #323232;\n          display: flex;\n          flex-wrap: wrap;\n          gap: 10px;\n          align-content: flex-start;\n        }\n        .polygon {\n          cursor: grab;\n          transition: transform 0.1s;\n          margin: 10px;\n        }\n        .polygon:active {\n          cursor: grabbing;\n          transform: scale(0.95);\n        }\n      </style>\n      <div class="buffer-zone">\n        <div id="shapes-container"></div>\n      </div>\n    '}}customElements.define("buffer-zone",n);class s extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.render(),this.setupButtons()}setupButtons(){setTimeout((()=>{[{id:"create-btn",event:"create-polygons",detail:()=>({count:Math.floor(16*Math.random())+5})},{id:"save-btn",event:"save-polygons"},{id:"reset-btn",event:"reset-polygons",before:()=>localStorage.removeItem("polygons")}].forEach((({id:t,event:e,detail:n,before:s})=>{const o=this.shadowRoot.getElementById(t);o&&o.addEventListener("click",(()=>{s&&s();const t=new CustomEvent(e,{...n?{detail:n()}:{},bubbles:!0,composed:!0});this.dispatchEvent(t)}))}))}),0)}render(){this.shadowRoot.innerHTML='\n      <style>\n        .control-panel {\n          display: flex;\n          justify-content: space-between;\n          padding: 20px;\n          background-color: #323232;\n          margin-bottom: 10px;\n        }\n        .btn-group {\n          display: flex;\n          gap: 10px;\n        }\n        button {\n          padding: 8px 16px;\n          border-radius: 4px;\n          background: #989898;\n          border: none;\n          cursor: pointer;\n          color: black;\n        }\n      </style>\n      <div class="control-panel">\n        <button id="create-btn">Создать</button>\n        <div class="btn-group">\n          <button id="save-btn">Сохранить</button>\n          <button id="reset-btn">Сбросить</button>\n        </div>\n      </div>\n    '}}customElements.define("control-panel",s);class o{constructor(t=1e3,e=500,n=100){this.width=t,this.height=e,this.step=n}draw(t,e,n=0){e.innerHTML="",t.innerHTML="";for(let e=0;e<=this.width;e+=this.step)t.innerHTML+=`\n        <line\n          x1="${e}"\n          y1="0"\n          x2="${e}"\n          y2="${this.height}"\n          stroke="#888" stroke-width="1"/>\n      `;for(let e=0;e<=this.height;e+=this.step)0!==e&&(t.innerHTML+=`\n        <line\n          x1="0"\n          y1="${this.height-e}"\n          x2="${this.width}"\n          y2="${this.height-e}"\n          stroke="#888"\n          stroke-width="1"/>\n      `);e.innerHTML+=`\n      <rect x="0"\n        y="${this.height-25}"\n        width="${this.width}"\n        height="25"\n        fill="#666666"\n      />\n    `,e.innerHTML+=`\n      <rect\n        x="0"\n        y="0"\n        width="30"\n        height="${this.height}"\n        fill="#666666"\n      />\n    `;for(let t=this.step;t<=this.width;t+=this.step)e.innerHTML+=`\n        <rect\n          x="${t-18}"\n          y="${this.height-25}"\n          width="36"\n          height="22"\n          fill="#666666"\n          rx="4"\n          ry="4"\n        />\n        <text\n          x="${t}"\n          y="${this.height-10}"\n          font-size="18"\n          fill="#000"\n          text-anchor="middle"\n          alignment-baseline="middle"\n        >${t/10+n}</text>\n      `;for(let t=this.step;t<=this.height;t+=this.step)e.innerHTML+=`\n        <rect\n          x="0"\n          y="${this.height-t-18}"\n          width="30"\n          height="22"\n          fill="#666666"\n          rx="4"\n          ry="4"\n        />\n        <text\n          x="3"\n          y="${this.height-t-1}"\n          font-size="18"\n          fill="#000"\n          alignment-baseline="middle"\n        >${t/10+n}</text>\n      `;e.innerHTML+=`\n      <rect\n        x="0"\n        y="${this.height-30}"\n        width="30"\n        height="22"\n        fill="#666666"\n        rx="4"\n        ry="4"\n      />\n      <text\n        x="8"\n        y="${this.height-12}"\n        font-size="18"\n        fill="#000"\n        alignment-baseline="middle"\n      >${n}</text>\n    `}}class i extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.droppedPolygons=[],this.scale=1,this.offset={x:0,y:0},this.panStart={x:0,y:0},this.labelsOffset=0}connectedCallback(){this.render(),this.setupAxes(),this.setupZoomAndPan(),this.setupDropZone(),document.addEventListener("reset-polygons",(()=>this.resetWorkZone()))}setupAxes(){this.gridDrawer=new o,this.gridDrawer.draw(this.shadowRoot.querySelector(".axes-bg g#axes-bg"),this.shadowRoot.querySelector(".axes g#axes-group"))}makeDraggable(t){let e=!1,n={x:0,y:0};t.setAttribute("draggable","false"),t.addEventListener("dragstart",(t=>t.preventDefault())),t.style.position="absolute",t.style.cursor="grab";const s=s=>{if(!e)return;const o=this.shadowRoot.getElementById("drop-area").getBoundingClientRect();let i=(s.clientX-o.left-n.x)/this.scale,r=(s.clientY-o.top-n.y)/this.scale;t.style.left=`${i}px`,t.style.top=`${r}px`},o=()=>{e&&(e=!1,t.style.cursor="grab",window.removeEventListener("mousemove",s),window.removeEventListener("mouseup",o))};t.addEventListener("mousedown",(i=>{i.stopPropagation(),0===i.button&&(e=!0,n.x=i.clientX-t.getBoundingClientRect().left,n.y=i.clientY-t.getBoundingClientRect().top,t.style.cursor="grabbing",window.addEventListener("mousemove",s),window.addEventListener("mouseup",o))}))}applyTransform(){this.shadowRoot.getElementById("axes-bg").setAttribute("transform",`scale(${this.scale})`);const t=this.shadowRoot.getElementById("drop-area");t.style.transform=`translate(${this.offset.x}px,${this.offset.y}px) scale(${this.scale})`,t.style.transformOrigin="0 0",this.gridDrawer&&this.gridDrawer.draw(this.shadowRoot.querySelector(".axes-bg g#axes-bg"),this.shadowRoot.querySelector(".axes g#axes-group"),this.labelsOffset)}setupZoomAndPan(){const t=this.shadowRoot.getElementById("viewport");t.addEventListener("wheel",(e=>{e.preventDefault();const n=this.scale;this.scale*=e.deltaY<0?1.1:.9,this.scale<1&&(this.scale=1),this.scale>5&&(this.scale=5),e.deltaY<0&&this.labelsOffset<100?this.labelsOffset+=10:e.deltaY>0&&this.labelsOffset>0&&(this.labelsOffset-=10);const s=t.getBoundingClientRect(),o=e.clientX-s.left-this.offset.x,i=e.clientY-s.top-this.offset.y;this.offset.x-=o*(this.scale/n-1),this.offset.y-=i*(this.scale/n-1),this.applyTransform()})),t.addEventListener("mousedown",(e=>{e.target.closest("svg")&&e.target!==t||0===e.button&&(this.isPanning=!0,this.panStart={x:e.clientX-this.offset.x,y:e.clientY-this.offset.y},t.style.cursor="grabbing")})),window.addEventListener("mousemove",(t=>{this.isPanning&&(this.offset.x=t.clientX-this.panStart.x,this.offset.y=t.clientY-this.panStart.y,this.offset.x>0&&(this.offset.x=0),this.offset.y>0&&(this.offset.y=0),this.applyTransform())})),window.addEventListener("mouseup",(()=>{this.isPanning=!1,t.style.cursor="grab"}))}setupDropZone(){this.addEventListener("dragover",(t=>{t.preventDefault(),t.dataTransfer.dropEffect="copy"})),this.addEventListener("drop",(t=>{t.preventDefault();const e=this.shadowRoot.getElementById("drop-area");let n=t.dataTransfer.getData("text/html")||t.dataTransfer.getData("text/plain");if(n)try{const s=new DOMParser;let o=s.parseFromString(n,"text/html").querySelector("svg")||s.parseFromString(n,"image/svg+xml").querySelector("svg");if(!o)throw new Error("Невозможно распарсить SVG");const i=e.getBoundingClientRect();let r=(t.clientX-i.left)/this.scale,a=(t.clientY-i.top)/this.scale;o.style.position="absolute",o.style.left=`${r}px`,o.style.top=`${a}px`,o.style.pointerEvents="auto",o.setAttribute("draggable","false"),e.appendChild(o),this.droppedPolygons.push(o),this.makeDraggable(o)}catch(t){console.error("Не удалось распарсить SVG:",t)}else console.error("Изображение SVG не найдено")}))}resetWorkZone(){const t=this.shadowRoot.getElementById("drop-area");t&&(t.innerHTML=""),this.droppedPolygons=[]}render(){this.shadowRoot.innerHTML='\n       <style>\n        .work-zone { position: relative; width: 100%; height: 500px; background: #323232; overflow: hidden; }\n        .axes { position: absolute; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; z-index: 2; }\n        .axes text { fill: #000 !important; }\n        .axes, .axes * { user-select: none; }\n        .viewport { width: 950px; height: 475px; position: absolute; top: 0; left: 0; z-index: 1; cursor: grab; }\n        .viewport:active { cursor: grabbing; }\n        .axes-bg { z-index: 0; }\n        .drop-area { position: absolute; top: 0; left: 0; width: 950px; height: 475px; z-index: 1; }\n        .drop-area svg {z-index: 10; position: absolute; pointer-events: auto;}\n      </style>\n      <div class="work-zone">\n        <svg class="axes-bg" width="100%" height="500">\n          <g id="axes-bg"></g>\n        </svg>\n        <div class="viewport" id="viewport">\n          <div class="drop-area" id="drop-area"></div>\n        </div>\n        <svg class="axes" width="1000" height="1000">\n          <g id="axes-group"></g>\n        </svg>\n      </div>\n    '}}customElements.define("work-zone",i),document.addEventListener("DOMContentLoaded",(()=>{const t=document.querySelector("div");t.innerHTML="\n    <app-layout>\n      <control-panel></control-panel>\n      <buffer-zone></buffer-zone>\n      <work-zone></work-zone>\n    </app-layout>\n  ",document.body.appendChild(t)}))})();